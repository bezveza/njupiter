#summary Documentation for nJupiter.Configuration

<wiki:toc max_depth="2" />

= nJupiter.Configuration =

nJupiter.Configuration is a lightweight component for easy management of XML configuration files. It makes it easy to fast add different configurations for your assemblies and components. It automatically adds file watchers to local files so configuration can be updated without restarting the application. 

== History and Purpose ==

nJupiter.Configuration was the first component that was written for nJupiter, it was the written in the spring of 2005 with the aim to produce a lightweight component that would be able to easily add new configuration to .NET projects. Back then no good open source component for configuration were available and the System.Configuration namespace in .NET 1.1 was quiet limited.

The only relativly free alternative back then was the [http://msdn.microsoft.com/en-us/library/ff648130.aspx Microsoft Configuration Application Block], which was a quite bloated component and also suffered from some realy important shortcomings. The XML files generated by this component was serialized hash tables which made the configuration files very inflexible and difficult to read and modify. The license was also not a desirable one, so [http://code.google.com/u/martin.odhelius/ I] decided to write my own component that would meet my aims, and the result was nJupiter.Configuration. The component is partly inspired by [http://logging.apache.org/log4net/index.html log4net] and how that component handles its configuration.

nJupiter.Configuration has since then been used in an uncountable number of projects and is today used on several enterprise web sites around the web. The strength of the component has always been that it is very easy to use but that it is also quiet flexible.

== Dependencies ==

  * [http://logging.apache.org/log4net/index.html log4net]

== How to set up nJupiter.Configuration ==

The first thing you have to do is to set up where nJupiter.Configuration shall look for its configuration files, you do this in your app.config or web.config. The first thing you have to do is to add a configuration section

{{{
<configSections>
   <section name="nJupiterConfiguration"
            type="nJupiter.Configuration.nJupiterConfigurationSectionHandler, nJupiter.Configuration" />
</configSections>
}}}

You then have to add configuration that tells nJupiter.Configuration whre to look for configuration files:

{{{
<nJupiterConfiguration>
   <configDirectories>
      <configDirectory value="~/Config"/>
      <configDirectory value="c:\MyOtherConfigs"/>      
   </configDirectories>
</nJupiterConfiguration>
}}}

As you can see you can define several differend configuration directories, if the same configuration file is located in several different directories nJupiter.Configuration will use the first file it finds. It will search the directories from top and down. If you are using nJupiter.Configuration in a web context it is also possible to define the path to the directories with a relative path by adding a tilde (~) before the path, if you do so the path will be located with help of System.Web.HttpContext.Current.Server.MapPath.

You can find a full example of how to configure your web.config [http://code.google.com/p/njupiter/source/browse/trunk/Development/Shared%20Resources/Config/web.config here]

== How to use ==

Soon to come

== Examples ==

Soon to come