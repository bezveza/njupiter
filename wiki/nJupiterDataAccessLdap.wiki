#summary Documentation for nJupiter.DataAccess.Ldap

<wiki:toc max_depth="2" />

= nJupiter.DataAccess.Ldap =

Component containing a generic MembershipProvider and RoleProvider for LDAP . These providers has been successfully tested with Microsoft Active Directory, Novell eDirectory, IBM Tivoli Directory Server and Lotus Domino but shall probably work with any type of LDAP-server such as OpenLDAP, 389 Directory Server, OpenDS / OpenDJ, Apache DS and Oracle Internet Directory (if you are using these providers with any of the server not listed as tested, please contact with status regaring if they successfully work or not).

The component also contain facades and abstractions for System.DirectoryServices namespace and a parser for distinguished names.

== History and Purpose ==

A few years ago [http://code.google.com/u/martin.odhelius/ I] started to work in a project that had the goal to use a CMS that were using .NET's MembershipProvider and RoleProvider architecture for authentication and user management. The customer that would use the CMS solution used an IBM Tivoli LDAP Directory Server and first I thought that would not be any problems since I was prety sure that it would exist a LDAP MembershipProvider and RoleProvider in the .NET framework, but to my surprise it didn't! Then I started to look around the web for alternatives but I didn't find any LDAP MembershipProvider and RoleProvider anywhere so I decided to write my own. My aims was to write a generic LDAP provider that should work both with my internal Active Directory test server and together with the customer's Tivoli server or with any other LDAP server out there, the result was nJupiter.DataAccess.Ldap.
 
== How to set up nJupiter.DataAccess.Ldap ==

You can install nJupiter.DataAccess.Ldap via NuGet. The NuGet package do not include any config though so you will have to activate the providers in your web.config and also add configuration for your LDAP-server before it will work.

nJupiter.DataAccess.Ldap is using [nJupiterConfiguration nJupiter.Configuration] which will install together with nJupiter.DataAccess.Ldap if you install it via NuGet.
For more information about how to configure and set up nJupiter.Configuration please refer to [nJupiterConfiguration#How_to_set_up_nJupiter.Configuration this page]. The config file containing the LDAP server config shall be named nJupiter.DataAccess.Ldap.config and placed anywhere where nJupiter.Configuration can read it. You can find an example file with  configurations for different LDAP servers [http://code.google.com/p/njupiter/source/browse/trunk/Development/Shared%20Resources/Config/nJupiter.DataAccess.Ldap.config here]. Read more how to configure the component [nJupiterConfiguration#How_to_configure_nJupiter._.Ldap here]

When you have added configuration for you LDAP server you are ready to turn the providers on in web.config. You do this in the membership and roleManager elements beneath system.web. Here is an example:

{{{
<system.web>
   <membership defaultProvider="LdapMembershipProvider">
      <providers>
         <clear/>
         <add name="LdapMembershipProvider"
              ldapServer="Tivoli"
              type="nJupiter.DataAccess.Ldap.LdapMembershipProvider,nJupiter.DataAccess.Ldap" />
      </providers>
   </membership>
   <roleManager enabled="true" defaultProvider="LdapRoleProvider" cacheRolesInCookie="true">
      <providers>
         <clear/>
         <add name="LdapRoleProvider"
              ldapServer="Tivoli"
              type="nJupiter.DataAccess.Ldap.LdapRoleProvider,nJupiter.DataAccess.Ldap" />
      </providers>
   </roleManager>
</system.web>
}}}

The ldapServer attribute tells which ldap configuration in nJupiter.DataAccess.Ldap.config to use, if this attribute is left out the configuration with the default="true" attribute will be used. If you need more information how to configure MembershipProviders and RoleProviders you can find it here:

  * [http://msdn.microsoft.com/en-us/library/ff648345.aspx How To: Use Membership in ASP.NET 2.0]
  * [http://msdn.microsoft.com/en-us/library/ff647401.aspx How To: Use Role Manager in ASP.NET 2.0]
  * [http://msdn.microsoft.com/en-us/library/1b9hw62f.aspx membership Element (ASP.NET Settings Schema)]
  * [http://msdn.microsoft.com/en-us/library/ms164660.aspx roleManager Element (ASP.NET Settings Schema)]
 
== How to configure nJupiter.DataAccess.Ldap ==

The nJupiter.DataAccess.Ldap.config config file has to contain an `ldapServers`-element that contain one or more `ldapServer`-elements. The `ldapServer`-element has to have a `value`-attribute that is the name of the server. If you do not specify a name in the `ldapServer`-attribute for your provider in web.config you have to add a `default` attribute set to `true` for any of the `ldapServer`-elements. Here is an example:

{{{
<ldapServer value="MyLdapServer" default="true">
   <!--... server configuration goes here -->
</ldapServer>
}}}

Beneath the `ldapServer`-element you add the configuration for the current server. The first thing you have to do is to define the URL to the LDAP-server. You do this in the `url`-element by setting the `value`-attribute to the URL for the server. This value has to be a fully qualified uri as defined in the [http://www.ietf.org/rfc/rfc2396.txt RFC 2396]. Here is an example:

{{{
<url value="LDAP://ldap.example.org:389/" />
}}}

The next thing you have to do is to define a `username` and `password` to use when the providers authenticating themselves towards the LDAP server. This user have to have read access in the directory. For more information please read more [http://msdn.microsoft.com/en-us/library/system.directoryservices.directoryentry.username%28v=vs.90%29 here] and [http://msdn.microsoft.com/en-us/library/system.directoryservices.directoryentry.password%28v=vs.90%29 here]. Here is an example:

{{{
<username value="uid=user,ou=people,dc=example,dc=org" />
<password value="password" />
}}}

You can also define the authentication types to use inside the `authenticationTypes`-element. The possible authentication types are `None`, `Secure`, `Encryption`, `SecureSocketsLayer`, `ReadonlyServer`, `Anonymous`, `FastBind`, `Signing`, `Sealing`, `Delegation` and  `ServerBind`. One or more of these values can be defined beneath the `authenticationTypes`-element in one `authenticationType`-element per type. If you do not define any `authenticationTypes`-element the default authentication type will be `None`. Read more about authentication types [http://msdn.microsoft.com/en-us/library/system.directoryservices.authenticationtypes%28v=vs.90%29 here]. Here is an example:

{{{
<authenticationTypes>
   <authenticationType value="SecureSocketsLayer" />
   <authenticationType value="ReadonlyServer" />
</authenticationTypes>
}}}

{{{
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
   <ldapServers>
      <ldapServer value="MyLdapServer" default="true">
         <url value="LDAP://ldap.example.org:389/" />
         <username value="uid=user,ou=people,dc=example,dc=org"/>
         <password value="password"/>
         <authenticationTypes>
            <authenticationType value="None" />
         </authenticationTypes>
         <timeLimit value="5" />
         <pageSize value="100" />
         <sizeLimit value="100" />
         <allowWildcardSearch value="true" />
         <rangeRetrievalSupport value="true" />
         <propertySortingSupport value="true" />
         <virtualListViewSupport value="true" />
         <users>
            <filter value="(objectClass=person)"/>
            <base value="ou=people,dc=example,dc=org" />
            <rdnAttribute value="uid" />
            <rdnInPath value="true" />
            <nameType value="cn" />
            <membershipAttribute value="memberOf" />
            <descriptionAttribute value="cn" />
            <emailAttribute value="mail" />
            <creationDateAttribute value="whenCreated" />
            <lastLoginDateAttribute value="lastLogon" />
            <lastPasswordChangedDateAttribute value="pwdLastSet" />
            <attributes>
               <attribute value="givenName" />
               <attribute value="sn" />
               <attribute value="title" excludeFromNameSearch="true" />
            </attributes>
         </users>
         <groups>
            <filter value="(objectClass=groupOfNames)"/>
            <base value="ou=groups,dc=example,dc=org" />
            <rdnAttribute value="cn" />
            <rdnInPath value="true" />
            <membershipAttribute value="member" />
            <nameType value="cn" />
         </groups>         
      </ldapServer>
   </ldapServers>
</configuration>
}}}

== How to use ==

The LdapMembershipProvider and LdapRoleProvider are working like standard MembershipProviders and RoleProviders, the providers are read only though and does not implement any functionality that writes information to the LDAP server, besides that you shall be able to use without doing anything more that explained in the previous section.

A bonus feature beside the standard provider interface is that the LdapMembershipProvider is able to load LDAP attributes for users besides the standard MembershipUser attributes. Those can be accessible by casting the  MembershipUser to an nJupiter.DataAccess.Ldap.LdapMembershipUser and read the Attributes property.

== Troubleshooting ==

If you get "System.InvalidOperationException: The value for the property Sort cannot be set", try do disabling property sorting by setting the propertySortingSupport to false in [http://code.google.com/p/njupiter/source/browse/trunk/Development/Shared%20Resources/Config/nJupiter.DataAccess.Ldap.config nJupiter.DataAccess.Ldap.config]

If you get "System.InvalidOperationException: The value for the property PageSize cannot be set.", try to disable paging by either removing the pageSize element entirely or by setting its value to 0 in [http://code.google.com/p/njupiter/source/browse/trunk/Development/Shared%20Resources/Config/nJupiter.DataAccess.Ldap.config nJupiter.DataAccess.Ldap.config]

If you get similar exceptions you can also try to turn of the rangeRetrievalSupport by setting its flag to false.

If you get "COMException (0x80005000): Unknown error (0x80005000)" or similar it is probably caused by difference between your authenticationTypes-setting and how your LDAP server is configured. You can read more about how to configure the authenticationTypes [http://msdn.microsoft.com/en-us/library/system.directoryservices.authenticationtypes.aspx here].